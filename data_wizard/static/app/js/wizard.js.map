{"version":3,"file":"wizard.js","sources":["django-data-wizard/packages/wizard/src/components/Center.js","django-data-wizard/packages/wizard/src/components/CloseWizard.js","django-data-wizard/packages/progress/src/progress.js","django-data-wizard/packages/wizard/src/hooks.js","django-data-wizard/packages/wizard/src/components/ContinueForm.js","django-data-wizard/packages/wizard/src/components/Progress.js","django-data-wizard/packages/wizard/src/inputs/MappingFieldsetArray.js","django-data-wizard/packages/wizard/src/inputs/MappingSelect.js","django-data-wizard/packages/wizard/src/inputs/ReadOnly.js","django-data-wizard/packages/wizard/src/views/SourceDetail.js","django-data-wizard/packages/wizard/src/views/RunAuto.js","django-data-wizard/packages/wizard/src/views/RunColumns.js","django-data-wizard/packages/wizard/src/views/RunDetail.js","django-data-wizard/packages/wizard/src/views/RunIds.js","django-data-wizard/packages/wizard/src/views/RunList.js","django-data-wizard/packages/wizard/src/views/RunRecords.js","django-data-wizard/packages/wizard/src/views/RunSerializers.js","django-data-wizard/node_modules/@mui/icons-material/esm/Replay.js","django-data-wizard/node_modules/@mui/icons-material/esm/PlayArrow.js","django-data-wizard/node_modules/@mui/icons-material/esm/AutoAwesome.js","django-data-wizard/packages/wizard/src/index.js"],"sourcesContent":["import React from 'react';\nimport { ScrollView } from '@wq/material';\nimport PropTypes from 'prop-types';\n\nexport default function Center({ children }) {\n    return (\n        <ScrollView>\n            <div style={{ flex: 1, display: 'flex', justifyContent: 'center' }}>\n                <div\n                    style={{\n                        width: '100%',\n                        maxWidth: '70em',\n                        padding: '1em',\n                        boxSizing: 'border-box',\n                    }}\n                >\n                    {children}\n                </div>\n            </div>\n        </ScrollView>\n    );\n}\n\nCenter.propTypes = {\n    children: PropTypes.node,\n};\n","import React from 'react';\nimport { useComponents, useReverse } from '@wq/react';\n\nexport default function CloseWizard() {\n    const { CancelButton, HorizontalView, View } = useComponents(),\n        reverse = useReverse();\n\n    return (\n        <HorizontalView>\n            <CancelButton\n                to={reverse('run_list')}\n                variant=\"outlined\"\n                color=\"secondary\"\n            >\n                Back\n            </CancelButton>\n            <View />\n        </HorizontalView>\n    );\n}\n","export class Progress {\n    constructor(config) {\n        this.config = {\n            interval: 0.5,\n            ...config,\n        };\n        if (!this.config.url) {\n            throw new Error('No URL specified!');\n        }\n    }\n    start() {\n        this._throttle = 0;\n        this._throttleCount = 0;\n        this._lastProgress = null;\n        this._timer = setInterval(\n            () => this.update(),\n            this.config.interval * 1000\n        );\n    }\n    stop() {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        delete this._throttle;\n        delete this._throttleCount;\n        delete this._lastProgress;\n        delete this._timer;\n    }\n    async update() {\n        if (this._pending) {\n            return;\n        }\n        if (this._throttleCount < this._throttle) {\n            this._throttleCount += 1;\n            return;\n        } else {\n            this._throttleCount = 0;\n        }\n        let data;\n        try {\n            this._pending = true;\n            const controller = new AbortController(),\n                timeout = setTimeout(() => controller.abort(), 10000),\n                response = await fetch(this.config.url, {\n                    signal: controller.signal,\n                });\n\n            clearTimeout(timeout);\n            data = await response.json();\n            this._pending = false;\n        } catch (e) {\n            this._pending = false;\n            if (e.name === 'AbortError') {\n                this.onError(new Error('Timeout while requesting status'));\n            } else {\n                this.onError(e);\n            }\n            return;\n        }\n\n        let done = false;\n        if (!data.total) {\n            this.onIndeterminate(data);\n            this._throttle++;\n        } else {\n            // Set to progress level\n            if (this._lastProgress && data.current < this._lastProgress) {\n                // Assume out-of order response; no update\n                /* jshint noempty: false */\n            } else if (this._lastProgress == data.current) {\n                // No change since last check; check less often\n                this._throttle++;\n            } else {\n                // Change since last check; check more often\n                this._lastProgress = data.current;\n                if (this._throttle > 0) {\n                    this._throttle--;\n                }\n            }\n\n            if (data.current == data.total) {\n                this.onComplete(data);\n                done = true;\n            }\n        }\n\n        if (data.status == 'SUCCESS' && !done) {\n            this.onComplete(data);\n        } else if (data.status == 'FAILURE') {\n            this.onFail(data);\n        } else if (!done) {\n            this.onProgress(data);\n        }\n\n        if (data.location) {\n            this.onNavigate(data);\n        }\n    }\n\n    onIndeterminate(data) {\n        if (this.config.onIndeterminate) {\n            this.config.onIndeterminate(data);\n        }\n    }\n\n    onProgress(data) {\n        if (this.config.onProgress) {\n            this.config.onProgress(data);\n        }\n    }\n\n    onError(error) {\n        if (this.config.onError) {\n            this.config.onError(error);\n        }\n    }\n\n    onComplete(data) {\n        if (this.config.onComplete) {\n            this.config.onComplete(data);\n        }\n        this.stop();\n    }\n\n    onFail(data) {\n        this.stop();\n        if (this.config.onFail) {\n            this.config.onFail(data);\n        }\n    }\n\n    onNavigate(data) {\n        this.stop();\n        if (this.config.onNavigate) {\n            this.config.onNavigate(data);\n        }\n    }\n}\n","import { useState, useEffect, useMemo } from 'react';\nimport { Progress } from '@wq/progress';\nimport { useRenderContext, useModel, useNav, useConfig } from '@wq/react';\n\nexport function useRunInfo() {\n    const context = useRenderContext(),\n        instance = useModel('run', context.id || -1);\n    return {\n        ...context,\n        ...instance,\n    };\n}\n\nexport function useProgress(url) {\n    const [progress, setProgress] = useState(null),\n        [value, setValue] = useState(null),\n        [status, setStatus] = useState(null),\n        [error, setError] = useState(false),\n        [data, setData] = useState(null),\n        nav = useNav(),\n        config = useConfig();\n\n    useEffect(() => {\n        const updateStatus = (data) => {\n            setData(data);\n            if (data.error || data.message) {\n                setStatus(data.error || data.message);\n            }\n        };\n        const progress = new Progress({\n            url,\n            onIndeterminate: updateStatus,\n            onProgress(data) {\n                setValue((data.current / data.total) * 100);\n                updateStatus(data);\n            },\n            onComplete(data) {\n                setValue(100);\n                setError(false);\n                updateStatus(data);\n            },\n            onFail(data) {\n                setValue(0);\n                setError(true);\n                updateStatus(data);\n            },\n            onError(err) {\n                setError(true);\n                setStatus('' + err);\n            },\n            onNavigate(data) {\n                const path = data.location.replace(\n                    config.router.base_url + '/',\n                    ''\n                );\n                nav(path);\n            },\n        });\n        progress.start();\n        setProgress(progress);\n        return () => progress.stop();\n    }, [url]);\n\n    return useMemo(() => {\n        return { progress, value, status, error, data };\n    }, [progress, value, status, error, data]);\n}\n","import React from 'react';\nimport { useComponents } from '@wq/react';\nimport { useRunInfo } from '../hooks';\nimport PropTypes from 'prop-types';\n\nexport default function ContinueForm({ children, submitLabel = 'Continue' }) {\n    const { id, label } = useRunInfo(),\n        { ScrollView, Form, Typography, SubmitButton, HorizontalView, View } =\n            useComponents();\n    return (\n        <ScrollView>\n            <Form\n                action={`datawizard/${id}/auto`}\n                method=\"POST\"\n                backgroundSync={false}\n            >\n                <Typography variant=\"h5\">{label}</Typography>\n                {children}\n                <HorizontalView>\n                    <View />\n                    <SubmitButton icon=\"continue\">{submitLabel}</SubmitButton>\n                </HorizontalView>\n            </Form>\n        </ScrollView>\n    );\n}\n\nContinueForm.propTypes = {\n    children: PropTypes.node,\n    submitLabel: PropTypes.string,\n};\n","import React from 'react';\nimport { LinearProgress } from '@mui/material';\nimport { useComponents } from '@wq/react';\nimport { useProgress } from '../hooks';\nimport PropTypes from 'prop-types';\n\nexport default function Progress({ url }) {\n    const { value, error, status } = useProgress(url),\n        { Typography, CloseWizard } = useComponents();\n    return (\n        <>\n            <LinearProgress\n                style={{ marginTop: 16, marginBottom: 16 }}\n                variant={value === null ? 'indeterminate' : 'determinate'}\n                value={value}\n            />\n            {status && (\n                <Typography color={error ? 'error' : 'textSecondary'}>\n                    {status}\n                </Typography>\n            )}\n            {value === 0 && error && <CloseWizard />}\n        </>\n    );\n}\n\nProgress.propTypes = {\n    url: PropTypes.string,\n};\n","import React from 'react';\nimport { useComponents, useInputComponents } from '@wq/react';\nimport PropTypes from 'prop-types';\n\nexport default function MappingFieldsetArray({ label, subform, children }) {\n    const { Table, TableHead, TableBody, TableRow, TableTitle } =\n            useComponents(),\n        { Fieldset } = useInputComponents();\n    return (\n        <Fieldset label={label}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        {subform\n                            .filter(\n                                (field) => field.control.appearance !== 'hidden'\n                            )\n                            .map((field) => (\n                                <TableTitle key={field.name}>\n                                    {field.label}\n                                </TableTitle>\n                            ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>{children}</TableBody>\n            </Table>\n        </Fieldset>\n    );\n}\n\nMappingFieldsetArray.propTypes = {\n    label: PropTypes.string,\n    subform: PropTypes.arrayOf(PropTypes.object),\n    children: PropTypes.node,\n};\n\nMappingFieldsetArray.Fieldset = function Fieldset({ children }) {\n    const { TableRow, TableCell } = useComponents();\n    return (\n        <TableRow>\n            {React.Children.toArray(children)\n                .filter((child) => child.props.control.appearance !== 'hidden')\n                .map((child) => (\n                    <TableCell key={child.props.name}>{child}</TableCell>\n                ))}\n        </TableRow>\n    );\n};\nMappingFieldsetArray.Fieldset.propTypes = {\n    children: PropTypes.node,\n};\n","import React from 'react';\nimport { useField } from 'formik';\nimport { useInputComponents } from '@wq/react';\nimport PropTypes from 'prop-types';\n\nexport default function MappingSelect(props) {\n    const { name } = props,\n        [, { value: type }] = useField(name.replace('mapping', 'type')),\n        { Select, ReadOnly } = useInputComponents();\n\n    if (type === 'unknown') {\n        return <Select {...props} label=\"\" placeholder=\"(No Selection)\" />;\n    } else {\n        return <ReadOnly {...props} />;\n    }\n}\n\nMappingSelect.propTypes = {\n    name: PropTypes.string,\n};\n","import React from 'react';\nimport { useField } from 'formik';\nimport { useComponents } from '@wq/react';\nimport PropTypes from 'prop-types';\n\nexport default function ReadOnly({ name }) {\n    const [, { value }] = useField(name),\n        { Typography } = useComponents();\n    return <Typography>{value}</Typography>;\n}\n\nReadOnly.propTypes = {\n    name: PropTypes.string,\n};\n","import React from 'react';\nimport {\n    useRenderContext,\n    useRouteInfo,\n    useComponents,\n    useReverse,\n} from '@wq/react';\n\nexport default function SourceDetail() {\n    const reverse = useReverse(),\n        context = useRenderContext(),\n        { page, item_id, page_config } = useRouteInfo(),\n        {\n            ScrollView,\n            PropertyTable,\n            Form,\n            SubmitButton,\n            Fab,\n            HorizontalView,\n            View,\n        } = useComponents(),\n        form = page_config.form || [{ name: 'label' }],\n        editUrl = reverse(`${page}_edit`, item_id),\n        content_type_id =\n            page_config.content_type_id || `sources.${page_config.name}`,\n        object_id = item_id;\n\n    return (\n        <>\n            <ScrollView>\n                <Form\n                    action=\"datawizard/\"\n                    method=\"POST\"\n                    data={{ content_type_id, object_id }}\n                    backgroundSync={false}\n                >\n                    <PropertyTable form={form} values={context} />\n                    <HorizontalView>\n                        <View />\n\n                        <SubmitButton icon=\"wizard\">\n                            Start Data Wizard\n                        </SubmitButton>\n                    </HorizontalView>\n                </Form>\n            </ScrollView>\n            {page_config.can_change !== false && (\n                <Fab icon=\"edit\" to={editUrl} />\n            )}\n        </>\n    );\n}\n","import React from 'react';\nimport { useComponents } from '@wq/react';\nimport { useRunInfo } from '../hooks';\n\nexport default function RunAuto() {\n    const { id, label, task_id, svc } = useRunInfo(),\n        { Typography, Progress, Center } = useComponents(),\n        url = `${svc}/datawizard/${id}/status.json?task=${task_id}`;\n    return (\n        <Center>\n            <Typography variant=\"h5\">{label}</Typography>\n            <Progress url={url} />\n        </Center>\n    );\n}\n","import React, { useMemo } from 'react';\nimport { useComponents, useInputComponents } from '@wq/react';\nimport { useRunInfo } from '../hooks';\n\nexport default function RunColumns() {\n    const {\n            id,\n            label,\n            result: { unknown_count, columns },\n        } = useRunInfo(),\n        [form, data] = useMemo(() => processFormData(columns), [columns]),\n        {\n            ScrollView,\n            Typography,\n            AutoForm,\n            TableRow,\n            TableCell,\n            ContinueForm,\n        } = useComponents(),\n        { MappingFieldsetArray } = useInputComponents();\n\n    if (!unknown_count) {\n        return (\n            <ScrollView>\n                <ContinueForm>\n                    <Typography variant=\"h6\">Mapped Columns</Typography>\n                    <Typography>The following columns are mapped.</Typography>\n                    <MappingFieldsetArray\n                        label={form[0].label}\n                        subform={form[0].children}\n                    >\n                        {data.columns.map(({ id, column, name, mapping }) => (\n                            <TableRow key={id}>\n                                <TableCell>{column}</TableCell>\n                                <TableCell>{name}</TableCell>\n                                <TableCell>{mapping}</TableCell>\n                            </TableRow>\n                        ))}\n                    </MappingFieldsetArray>\n                </ContinueForm>\n            </ScrollView>\n        );\n    } else {\n        return (\n            <ScrollView>\n                <AutoForm\n                    action={`datawizard/${id}/updatecolumns`}\n                    method=\"POST\"\n                    backgroundSync={false}\n                    form={form}\n                    data={data}\n                >\n                    <Typography variant=\"h5\">{label}</Typography>\n                    <Typography variant=\"h6\">Unknown Columns</Typography>\n                    <Typography>\n                        This file contains {unknown_count} column\n                        {unknown_count > 1 ? 's' : ''} that{' '}\n                        {unknown_count > 1 ? 'are' : 'is'} not yet recognized by\n                        this database.\n                    </Typography>\n                </AutoForm>\n            </ScrollView>\n        );\n    }\n}\n\nfunction processFormData(columns) {\n    const column = (columns || []).find((column) => column.types),\n        types = column ? column.types : [],\n        mappingChoices = [];\n\n    types.forEach(({ name: group, choices }) => {\n        choices.forEach(({ id: name, label }) => {\n            mappingChoices.push({ name, label, group });\n        });\n    });\n\n    const form = [\n        {\n            type: 'repeat',\n            name: 'columns',\n            label: 'Columns',\n            control: { appearance: 'mapping-fieldset-array' },\n            children: [\n                {\n                    type: 'string',\n                    name: 'column',\n                    label: 'Column',\n                    control: { appearance: 'read-only' },\n                },\n                {\n                    type: 'select one',\n                    name: 'type',\n                    label: 'Type',\n                    choices: [\n                        { name: 'attribute', label: 'EAV Column' },\n                        { name: 'meta', label: 'Column/Header' },\n                        { name: 'instance', label: 'FK Value' },\n                        { name: 'unresolved', label: 'Unresolved' },\n                        { name: 'unknown', label: 'Unknown' },\n                    ],\n                    control: { appearance: 'hidden' },\n                },\n                {\n                    type: 'string',\n                    name: 'name',\n                    label: 'Spreadsheet Value',\n                    control: { appearance: 'read-only' },\n                },\n                {\n                    type: 'select one',\n                    name: 'mapping',\n                    label: 'Mapping',\n                    choices: mappingChoices,\n                    control: { appearance: 'mapping-select' },\n                },\n            ],\n        },\n    ];\n    const data = {\n        columns: columns.map(({ rel_id: id, column, type, name, mapping }) => ({\n            id,\n            column,\n            type,\n            name,\n            mapping,\n        })),\n    };\n    return [form, data];\n}\n","import React from 'react';\nimport { useComponents, useReverse } from '@wq/react';\nimport { useRunInfo } from '../hooks';\n\nexport default function RunDetail() {\n    const {\n            ScrollView,\n            Typography,\n            Table,\n            TableBody,\n            TableRow,\n            TableCell,\n            Link,\n            Center,\n            ContinueForm,\n        } = useComponents(),\n        runInfo = useRunInfo(),\n        { id, label, serializer_label, record_count, last_update } = runInfo,\n        reverse = useReverse();\n    if (record_count !== null) {\n        return (\n            <Center>\n                <Typography variant=\"h5\">{label}</Typography>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>Serializer</TableCell>\n                            <TableCell>\n                                {typeof serializer_label === 'function'\n                                    ? serializer_label.call(runInfo)\n                                    : serializer_label}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>Records</TableCell>\n                            <TableCell>\n                                <Link to={reverse('run_records', id)}>\n                                    {record_count} record\n                                    {record_count === 1 ? '' : 's'} imported.\n                                </Link>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>Last Updated</TableCell>\n                            <TableCell>\n                                {new Date(last_update).toLocaleString()}\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </Center>\n        );\n    } else {\n        return (\n            <ScrollView>\n                <ContinueForm submitLabel=\"Start Import\">\n                    <Typography variant=\"h6\">\n                        Click to start the import wizard.\n                    </Typography>\n                </ContinueForm>\n            </ScrollView>\n        );\n    }\n}\n","import React, { useMemo } from 'react';\nimport { useComponents, useInputComponents } from '@wq/react';\nimport { useRunInfo } from '../hooks';\n\nexport default function RunIds() {\n    const {\n            id,\n            label,\n            result: { unknown_count, types },\n        } = useRunInfo(),\n        [form, data] = useMemo(() => processFormData(types), [types]),\n        {\n            ScrollView,\n            Typography,\n            AutoForm,\n            TableRow,\n            TableCell,\n            ContinueForm,\n        } = useComponents(),\n        { MappingFieldsetArray } = useInputComponents();\n    if (!unknown_count) {\n        return (\n            <ScrollView>\n                <ContinueForm>\n                    <Typography variant=\"h6\">Mapped Identifiers</Typography>\n                    <Typography>\n                        The following identifiers are mapped.\n                    </Typography>\n                    {form.map(({ name, label, children }) => (\n                        <MappingFieldsetArray\n                            key={name}\n                            label={label}\n                            subform={children}\n                        >\n                            {data[name].map(({ id, name, count, mapping }) => (\n                                <TableRow key={id}>\n                                    <TableCell>{name}</TableCell>\n                                    <TableCell>{count}</TableCell>\n                                    <TableCell>{mapping}</TableCell>\n                                </TableRow>\n                            ))}\n                        </MappingFieldsetArray>\n                    ))}\n                </ContinueForm>\n            </ScrollView>\n        );\n    } else {\n        return (\n            <ScrollView>\n                <AutoForm\n                    action={`datawizard/${id}/updateids`}\n                    method=\"POST\"\n                    backgroundSync={false}\n                    form={form}\n                    data={data}\n                >\n                    <Typography variant=\"h5\">{label}</Typography>\n                    <Typography variant=\"h6\">Unknown Identifiers</Typography>\n                    <Typography>\n                        This file contains {unknown_count} identifier\n                        {unknown_count > 1 ? 's' : ''} that{' '}\n                        {unknown_count > 1 ? 'are' : 'is'} not yet recognized by\n                        this database.\n                    </Typography>\n                </AutoForm>\n            </ScrollView>\n        );\n    }\n}\n\nfunction processFormData(types) {\n    const form = [],\n        data = {};\n\n    types.forEach(({ type_id, type_label, ids }) => {\n        const fieldName = type_id.replace('.', '_'),\n            id = (ids || []).find((id) => id.choices),\n            choices = id\n                ? id.choices.map(({ id: name, label }) => ({ name, label }))\n                : [];\n\n        form.push({\n            type: 'repeat',\n            name: fieldName,\n            label: `${type_label} Identifiers`,\n            control: { appearance: 'mapping-fieldset-array' },\n            children: [\n                {\n                    type: 'string',\n                    name: 'name',\n                    label: 'Identifier',\n                    control: { appearance: 'read-only' },\n                },\n                {\n                    type: 'select one',\n                    name: 'type',\n                    label: 'Type',\n                    choices: [\n                        { name: 'mapped', label: 'Mapped' },\n                        { name: 'unknown', label: 'Unknown' },\n                    ],\n                    control: { appearance: 'hidden' },\n                },\n                {\n                    type: 'int',\n                    name: 'count',\n                    label: 'Occurrences',\n                    control: { appearance: 'read-only' },\n                },\n                {\n                    type: 'select one',\n                    name: 'mapping',\n                    label: type_label,\n                    choices,\n                    control: { appearance: 'mapping-select' },\n                },\n            ],\n        });\n\n        data[fieldName] = ids.map(\n            ({\n                ident_id: id,\n                value: name,\n                count,\n                match: mapping,\n                unknown,\n            }) => ({\n                id,\n                name,\n                type: unknown ? 'unknown' : 'resolved',\n                count,\n                mapping,\n            })\n        );\n    });\n\n    return [form, data];\n}\n","import React from 'react';\nimport { useComponents, useList, useReverse } from '@wq/react';\n\nexport default function RunList() {\n    const {\n            Typography,\n            Link,\n            Table,\n            TableHead,\n            TableBody,\n            TableRow,\n            TableTitle,\n            TableCell,\n            Center,\n        } = useComponents(),\n        { list, empty } = useList(),\n        reverse = useReverse();\n\n    return (\n        <Center>\n            <Typography variant=\"h4\">Django Data Wizard</Typography>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableTitle>Run</TableTitle>\n                        <TableTitle>Serializer</TableTitle>\n                        <TableTitle>Records</TableTitle>\n                        <TableTitle>Last Update</TableTitle>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {empty && (\n                        <TableCell colspan={4}>No previous runs.</TableCell>\n                    )}\n                    {list.map(\n                        ({\n                            id,\n                            label,\n                            serializer_label,\n                            record_count,\n                            last_update,\n                        }) => (\n                            <TableRow key={id}>\n                                <TableCell>\n                                    <Link to={reverse('run_detail', id)}>\n                                        {label}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>{serializer_label || '-'}</TableCell>\n                                <TableCell>\n                                    {typeof record_count === 'number'\n                                        ? record_count\n                                        : record_count || '-'}\n                                </TableCell>\n                                <TableCell>\n                                    {last_update\n                                        ? new Date(last_update).toLocaleString()\n                                        : '-'}\n                                </TableCell>\n                            </TableRow>\n                        )\n                    )}\n                </TableBody>\n            </Table>\n        </Center>\n    );\n}\n","import React from 'react';\nimport { useComponents } from '@wq/react';\nimport { useRunInfo } from '../hooks';\nimport PropTypes from 'prop-types';\n\nexport default function RunRecords() {\n    const {\n            Typography,\n            Table,\n            TableHead,\n            TableBody,\n            TableRow,\n            TableTitle,\n            TableCell,\n            Center,\n            CloseWizard,\n        } = useComponents(),\n        runInfo = useRunInfo(),\n        { label, records } = runInfo,\n        hasRecords = records && records.length > 0;\n\n    return (\n        <Center>\n            <Typography variant=\"h5\">{label}</Typography>\n            <Typography variant=\"h6\">Imported Records</Typography>\n            <Typography>Import Complete!</Typography>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableTitle>Row</TableTitle>\n                        <TableTitle>Record</TableTitle>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {!hasRecords && (\n                        <TableCell colspan={2}>No records imported.</TableCell>\n                    )}\n                    {hasRecords &&\n                        records.map((record) => (\n                            <TableRow key={record.row}>\n                                <TableCell>{record.row}</TableCell>\n                                <TableCell>\n                                    <RecordLink {...record} />\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                </TableBody>\n            </Table>\n            <CloseWizard />\n        </Center>\n    );\n}\n\nfunction RecordLink({ success, object_url, object_label, fail_reason }) {\n    const { Link, Typography } = useComponents();\n    if (success) {\n        if (object_url) {\n            return <Link to={object_url}>{object_label}</Link>;\n        } else {\n            return object_label;\n        }\n    } else {\n        return (\n            <Typography color=\"error\">\n                {fail_reason || 'Unknown Error'}\n            </Typography>\n        );\n    }\n}\n\nRecordLink.propTypes = {\n    success: PropTypes.bool,\n    object_url: PropTypes.string,\n    object_label: PropTypes.string,\n    fail_reason: PropTypes.string,\n};\n","import React, { useMemo } from 'react';\nimport { useComponents } from '@wq/react';\nimport { useRunInfo } from '../hooks';\n\nexport default function RunSerializers() {\n    const {\n            id,\n            label,\n            serializer,\n            serializer_label,\n            result = {},\n        } = useRunInfo(),\n        { serializer_choices = [] } = result,\n        form = useMemo(\n            () => [\n                {\n                    type: 'select one',\n                    name: 'serializer',\n                    label: 'Select Format',\n                    choices: serializer_choices,\n                    control: { appearance: 'radio' },\n                },\n            ],\n            [serializer_choices]\n        ),\n        { ScrollView, Typography, AutoForm, ContinueForm, Center } =\n            useComponents();\n    if (serializer) {\n        return (\n            <ScrollView>\n                <ContinueForm>\n                    <Typography variant=\"h6\">Data Format</Typography>\n                    <Typography>\n                        This dataset will be parsed as &ldquo;{serializer_label}\n                        &rdquo;.\n                    </Typography>\n                </ContinueForm>\n            </ScrollView>\n        );\n    } else if (!(serializer_choices.length > 0)) {\n        return (\n            <Center>\n                <Typography variant=\"h6\" color=\"error\">\n                    No serializers registered.\n                </Typography>\n                <Typography>\n                    See{' '}\n                    <a href=\"https://django-data-wizard.wq.io/overview/setup#target-model-registration\">\n                        https://django-data-wizard.wq.io/overview/setup#target-model-registration\n                    </a>{' '}\n                    for more information.\n                </Typography>\n            </Center>\n        );\n    } else {\n        return (\n            <ScrollView>\n                <AutoForm\n                    action={`datawizard/${id}/updateserializer`}\n                    method=\"POST\"\n                    backgroundSync={false}\n                    form={form}\n                >\n                    <Typography variant=\"h5\">{label}</Typography>\n                    <Typography variant=\"h6\">\n                        Select a format to continue\n                    </Typography>\n                </AutoForm>\n            </ScrollView>\n        );\n    }\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z\"\n}), 'Replay');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8 5v14l11-7z\"\n}), 'PlayArrow');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m19 9 1.25-2.75L23 5l-2.75-1.25L19 1l-1.25 2.75L15 5l2.75 1.25L19 9zm-7.5.5L9 4 6.5 9.5 1 12l5.5 2.5L9 20l2.5-5.5L17 12l-5.5-2.5zM19 15l-1.25 2.75L15 19l2.75 1.25L19 23l1.25-2.75L23 19l-2.75-1.25L19 15z\"\n}), 'AutoAwesome');","import * as components from './components/index';\nimport * as inputs from './inputs/index';\nimport * as views from './views/index';\nimport * as icons from './icons';\n\nconst wizard = {\n    name: 'wizard',\n    components: { ...components },\n    inputs: { ...inputs },\n    views: { ...views },\n    icons: { ...icons },\n    async context(ctx, routeInfo) {\n        const { page, mode, full_path } = routeInfo;\n        if (\n            page === 'run' &&\n            mode &&\n            !['list', 'detail', 'edit', 'auto', 'data'].includes(mode)\n        ) {\n            const response = await fetch(full_path, {\n                    headers: { Accept: 'application/json' },\n                }),\n                data = await response.json();\n            if (mode !== 'records') {\n                await this.app.models.run.update([data]);\n            }\n            return data;\n        }\n    },\n};\n\nexport default wizard;\nexport * from './components/index';\nexport * from './views/index';\nexport * from './hooks';\n"],"names":["Center","children","React","createElement","ScrollView","style","flex","display","justifyContent","width","maxWidth","padding","boxSizing","propTypes","PropTypes","node","CloseWizard","CancelButton","HorizontalView","View","useComponents","reverse","useReverse","to","variant","color","Progress$1","Progress","constructor","config","this","interval","url","Error","start","_throttle","_throttleCount","_lastProgress","_timer","setInterval","update","stop","clearInterval","async","_pending","data","controller","AbortController","timeout","setTimeout","abort","response","fetch","signal","clearTimeout","json","e","name","onError","done","total","current","onComplete","onIndeterminate","status","onFail","onProgress","location","onNavigate","error","useRunInfo","context","useRenderContext","instance","useModel","id","useProgress","progress","setProgress","useState","value","setValue","setStatus","setError","setData","nav","useNav","useConfig","useEffect","updateStatus","message","err","path","replace","router","base_url","useMemo","ContinueForm","submitLabel","label","Form","Typography","SubmitButton","action","method","backgroundSync","icon","string","Fragment","LinearProgress","marginTop","marginBottom","MappingFieldsetArray","subform","Table","TableHead","TableBody","TableRow","TableTitle","Fieldset","useInputComponents","filter","field","control","appearance","map","key","arrayOf","object","TableCell","Children","toArray","child","props","MappingSelect","type","useField","Select","ReadOnly","_extends","placeholder","SourceDetail","page","item_id","page_config","useRouteInfo","PropertyTable","Fab","form","editUrl","content_type_id","object_id","values","can_change","RunAuto","task_id","svc","RunColumns","result","unknown_count","columns","column","find","types","mappingChoices","forEach","group","choices","push","rel_id","mapping","processFormData","AutoForm","RunDetail","Link","runInfo","serializer_label","record_count","last_update","call","Date","toLocaleString","RunIds","type_id","type_label","ids","fieldName","ident_id","count","match","unknown","RunList","list","empty","useList","colspan","RunRecords","records","hasRecords","length","record","row","RecordLink","success","object_url","object_label","fail_reason","RunSerializers","serializer","serializer_choices","href","bool","Replay","createSvgIcon","_jsx","jsx","d","PlayArrow","AutoAwesome","wizard","components","inputs","views","icons","ctx","routeInfo","mode","full_path","includes","headers","Accept","app","models","run"],"mappings":"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","x_google_ignoreList":[17,18,19]}